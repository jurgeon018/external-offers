<html>
   <head>

      <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
      <script src="https://cdn.voximplant.com/edge/voximplant.min.js"></script>
      {% if debug %}
        <script src="http://master.moderation-confidence-index.dev3.cian.ru/Content/js/call-component.js"></script>
      {% else %}
        <link rel="stylesheet" type="text/css" href='/mcs/moderation-confidence-index/content/css/call-component.css'> 
        <script src='/mcs/moderation-confidence-index/content/js/call-component.js'></script>
      {% endif %}

      <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
      <style>
         .client-info-block {
         margin: 1em;
         display: {% if (client is defined) and client %} block {% else %} none {% endif %};
         }

         .client-info-block-title {
         font-weight: bold;
         padding: 0.5em 0;
         }

         .offers-block {
         margin: 1em;
         display: {% if (offers is defined) and offers %} block {% else %} none{% endif %};
         }
         .offers-block-title {
         font-weight: bold;
         padding: 0.5em 0;
         }
         .offers-row.offers-row-header {
         border-top: 2px solid #000000;
         }
         .offercolumn.offercolumnheader {
         font-weight: bold;
         }
         .offercolumn.offer-column-identifier {
         cursor: pointer;
         color: #337AB7;
         font-weight: bold;
         }
         .offercolumn.offer-column-identifier:hover {
         text-decoration: underline;
         color: #22527C;
         }
         .client-info-profile-url:hover {
         text-decoration: none;
         text-shadow: 0.5px 0.5px 0.5px #555;
         }
         .offers-row {
         border-top: 0;
         border-bottom: 2px solid #000000;
         border-left: 2px solid #000000;
         border-right: 2px solid #000000;
         grid-column-start: 1;
         grid-column-end: 5;
         grid-row-start: 1;
         grid-row-end: 3;
         display: grid;
         grid-template-columns: 0.5fr 0.5fr 1fr 0.30fr 0.25fr 0.25fr 0.25fr;
         border-radius: 2px;
         padding: 1em;
         }
         .update-offers-block {
         padding: 1em;
         display: {% if (offers is defined) and offers %} none {% else %} grid {% endif %};
         }
         .update-offers-button {
         margin: auto;
         }
         .return-client-block {
         margin: auto;
         padding: 1.5em 0 0 0;
         display: flex;
         }
         #clientPhoneNumberInputWrapper {
         padding: 0 0.5em 0 0;
         }
         .update-offers-messages {
         margin: auto;
         padding: 0.5em;
         }
         .error-messages-block {
         display: {% if not (client is defined) or not (client) or not (offers is defined) or not offers %} grid {% else %} none {% endif %};
         }

         .client-error-message {
         margin: auto;
         display: {% if (client is defined) and client %} none {% else %} grid {% endif %};
         }
         .offers-error-message {
         margin: auto;
         display: {% if (client is defined) and (client) and not (offers is defined) and not offers %} grid {% else %} none {% endif %};
         }
         .decline-client-block {
         padding: 0.5em 0em;
         display: inline-block;
         }
         .call-missed-client-block {
         padding: 0.5em 0em 0em 0.5em;
         display: inline-block;
         }
         .phone-unavailable-client-block {
         padding: 0.5em 0em 0em 0.5em;
         display: inline-block;
         }
         .promo-given-client-block {
         padding: 0.5em 0em 0em 0.5em;
         display: inline-block;
         }
         .call-interrupted-client-block {
         padding: 0.5em 0em 0em 0.5em;
         display: inline-block;
         }
         .call-later-client-block {
         padding: 0.5em 0em;
         display: flex;
         }
         .additional-fields-block {
             display: flex;
             margin-top: 20px;
             flex-direction: column;
             justify-content: center;
         }
         .caller-block {
             margin-top: 20px;
              margin: 1em;
         }
         .additional-fields-block div {
             margin: 5px 0 2px 0;
             display: block;
         }
         .reason-of-decline-client-block {
             display: block;
         }
         .additional-emails-client-block {
             padding: 0.5em 0em;
             display: block;
         }
         .additional-info-client-block {
             padding: 0.5em 0em;
             display: block;
         }
         .additlional-numbers-client-block {
             padding: 0.5em 0em;
             display: block;
         }
         #call-later-datetime {
         margin: 0em 1em 0em 0em
         }
         .test_block {
         margin: auto;
         padding: 1.5em 0 0 0;
         display: flex;
         }
         .block {
         margin: auto;
         padding: 1.5em 0 0 0;
         display: flex;           
         }
        #createTestClient{
          margin: auto;
          margin-bottom: 3px;
        }
        #createTestOffer{
          margin: auto;
          margin-bottom: 3px;
        }
        client-id-input {
          width: 100px;
        }
         .comment-client-block {
         padding: 0em 1em 0em 0em;
         display: inline-block;
         }
         #comment {
         margin: 0em 1em 0em 0em
         }
         .call-history {
             vertical-align: top;
             margin: 7px 0 0 10px;
         }
      </style>
      <title>Задания</title>
      <meta charset="utf-8">
   </head>
   <body>
      <div class="update-offers-block">
        <div class="block">
          <button onclick="redirectToTeamsPage(this)">Команды</button>
        </div>
        <hr>
        {% if operator_is_tester %}
          <div class="test_block">
              <input id="sourceUserIdInput" type="text" placeholder="Введите sourceUserId клиента"/>
              <button id="createTestClient">Создать тестового клиента</button>
          </div>
          <div class="test_block">
              <input value="1_" id="sourceObjectIdInput" type="text" placeholder="Введите sourceObjectId обьявления"/>
              <button id="createTestOffer">Создать тестовое задание</button>
          </div>
          <div class="test_block">
            <select class="select-control" id="test_select">
                <option value="test" selected>Получать тестовые задания</option>
                <option value="real">Получать реальные задания</option>
            </select>
          </div>
        {% endif %}
        <button class="update-offers-button" id="updateOffersBtn">Получить задания</button>
        <div class="return-client-block">
            <div id="clientPhoneNumberInputWrapper" class="client-form-phone-input">
                <input id="clientPhoneNumberInput" placeholder="Телефон клиента"
                       type="string"
                       size=20
                       maxlength=15>
            </div>
            <div id="clientPhoneNumberBtn">
               <button id="returnClientByPhoneNumberBtn" type="button">Взять клиента в работу</button>
            </div>
        </div>
        <div class="update-offers-messages" id="updateOffersMessages1"></div>
      </div>
      <div class="client-info-block">
         <div class="client-info-block-title">Клиент</div>
         {% if (client.unactivated) %}
         <div id="clientInfoClientUnactivated">Добивочная карточка</div>
         {% else %}
         <div id="clientInfoClientUnactivated">Новая карточка</div>
         {% endif %}
         {% if client_is_calltracking %}Номер колтрекинговый{% else %}Номер не колтрекинговый{% endif %}
         {% if (client.cian_user_id) %}<div class="client-info-profile-url"> <a rel="noopener noreferrer" target="_blank" href="https://service.cian.ru/customers/view/{{ client.cian_user_id }}">Профиль</a></div>{% endif %}
         <div id="clientInfoClientId">Идентификатор: {{ client.client_id }}</div>
         {% if (client.client_name) %}<div id="clientInfoClientName">Имя: {{ client.client_name }}</div>{% endif %}
         {% if (client.segment) %}<div id="clientInfoClientSegment">Сегмент: {{ client.segment.value }}</div>{% endif %}
         <div id="clientInfoClientPhone">Телефон: {{ client.client_phones | join(',') }}</div>
         <div id="clientInfoClientCallsCount">Номер звонка: {% if client.calls_count %} {{ client.calls_count }} {% else %} 0 {% endif %}</div>
         <div class="client-buttons">
            <div class="decline-client-block">
               <button class="decline-client-button" id="declineClientButton1">Отказ</button>
               <div class="decline-client-messages" id="declineClientMessages1"></div>
            </div>
            <div class="call-missed-client-block">
               <button class="call-missed-client-button" id="callMissedClientButton1">Недозвон</button>
               <div class="call-missed-client-messages" id="callMissedClientMessages1"></div>
            </div>
            <div class="phone-unavailable-client-block">
               <button class="phone-unavailable-client-button" id="phoneUnavailableClientButton">Телефон недоступен</button>
               <div class="phone-unavailable-client-messages" id="phoneUnavailableClientMessages"></div>
            </div>
            <div class="promo-given-client-block">
               <button {% if current_operator.team_type.value == 'hunter' %}disabled{% endif %}
                class="promo-given-client-button" id="promoGivenClientButton"
               >
                Выдан промокод
               </button>
               <div class="promo-given-client-messages" id="promoGivenClientMessages"></div>
            </div>
            <div class="call-interrupted-client-block">
               <button class="call-interrupted-client-button" id="callInterruptedClientButton">Бросили трубку</button>
               <div class="call-interrupted-client-messages" id="callInterruptedClientMessages"></div>
            </div>
            <div class="call-later-client-block">
               <input id="call-later-datetime" type="datetime-local" value={{ next_call_datetime }}>
               <button class="call-later-client-button" id="callLaterClientButton1">Перезвонить</button>
               <div class="call-later-client-messages" id="callLaterClientMessages1"></div>
            </div>
            <div class="comment-client-block">
               <textarea id="comment">{% if client.comment %}{{client.comment}}{% endif %}</textarea>
               <button class="comment-client-button" id="commentClientButton">
                  {% if client.comment %}
                    Изменить коментарий
                  {% else %}
                    Оставить коментарий
                  {% endif %}
                </button>
               <div class="comment-client-messages" id="commentClientMessages"></div>
            </div>
             <div class="additional-fields-block">
                 <h3>Дополнительные поля:</h3>
                 <div class="reason-of-decline-client-block">
                     <div>Причина отказа:</div>
                     <select class="select-control" id="getReasonOfDecline">
                         <option value="" selected>Не выбрано</option>
                         <option value="not_effective">Циан не эффективен</option>
                         <option value="expensive">Дорого</option>
                         <option value="dont_like_support">Не нравится поддержка Циан</option>
                         <option value="difficult_service" >Сложный сервис</option>
                         <option value="not_a_publisher">Не я занимаюсь размещением</option>
                         <option value="dont_engage_in_real_estate">Не занимается недвижимостью</option>
                         <option value="only_residential_property">Только жилая</option>
                         <option value="no_offers_and_wont_be">Нет объектов и не будет</option>
                         <option value="no_offers_but_will_be">Нет объектов, но будут</option>
                         <option value="decline_conversation">Сброс в отказ от разговора</option>
                         <option value="not_interested">Не интересно</option>
                         <option value="dont_trust">Не доверяю</option>
                         <option value="have_no_time">Нет времени</option>
                         <option value="frequent_calls">Частые звонки</option>
                         <option value="other">Иное</option>
                     </select>
                     <button class="reason-of-decline-button" id="reasonOfDeclineClientButton">
                         Сохранить
                     </button>
                     <div class="messages" id="reasonOfDeclineClientMessages"></div>
                 </div>
                 <div class="additional-numbers-client-block">
                     <div>Доп. номера:</div>
                     <input type="text" id="getAdditionalNumbers" placeholder="Доп. номера"
                            value="{{ client.additional_numbers }}" size=30>
                     <button class="additional-numbers-client-button" id="additionalNumbersClientButton">
                         Сохранить
                     </button>
                     <div class="messages" id="additionalNumbersClientMessages"></div>
                 </div>
                 <div class="additional-emails-client-block">
                     <div>Доп. почты:</div>
                     <input type="text" id="getAdditionalEmails" placeholder="Доп. почты"
                            value="{{ client.additional_emails }}" size=30>
                     <button class="additional-emails-client-button" id="additionalEmailsClientButton">
                         Сохранить
                     </button>
                     <div class="messages" id="additionalEmailsClientMessages"></div>
                 </div>
                 {% if current_operator.team_type.value == 'hunter' or not current_operator.team_type %}
                 <div class="additional-info-client-block">
                     <h3>Добытая реальная информация про клиента:</h3>
                     Номер телефона: <br>
                     <input type="text" id="realPhoneInput" placeholder="Введите добытый номер телефона"
                            value="{% if client.real_phone%}{{ client.real_phone }}{% endif %}" size=30>
                     <br><br>
                     ФИО: <br>  
                     <input type="text" id="realNameInput" placeholder="Введите настоящее ФИО клиента"
                            value="{% if client.real_name%}{{ client.real_name }}{% endif %}" size=30>
                     <br><br>
                                        
                     Дата добычи номера телефона: <br>
                     <input type="datetime-local" id="realPhoneDtInput" placeholder="Введите дату добычи реального номера телефона" value={% if client.real_phone%}{{ client.real_phone_hunted_at }}{% else %}{{default_real_phone_hunted_at}}{% endif %} size=30>
                     <br><br>
                     <button id="realPhoneButton" class="realPhoneButton">
                         Сохранить
                     </button>
                 </div>
                 {% elif current_operator.team_type.value == 'attractor' and client.real_phone %}
                 <div class="additional-info-client-block">
                    {% if client.real_name%}<div>Добытое настоящее ФИО клиента: {{ client.real_name }}</div>{% endif %}
                     <div>Добытый реальный номер телефона: {{ client.real_phone }}</div>
                     <div>Дата добычи: {{ client.real_phone_hunted_at }}</div>
                 </div>
                 {% endif %}
             </div>
         </div>
      </div>
      <div class="offers-block">
         <div class="offers-block-title">Объявления</div>
         <div class="offers-grid">
            <div class="offers-row offers-row-header">
               <div class="offercolumn offercolumnheader">Идентификатор</div>
               <div class="offercolumn offercolumnheader">Название</div>
               <div class="offercolumn offercolumnheader">Адрес</div>
               <div class="offercolumn offercolumnheader">Создано</div>
               <div class="offercolumn offercolumnheader">Статус</div>
            </div>
            {% for offer in offers %}
            <div class="offers-row">
               <div class="offercolumn offer-column-identifier" onclick="onClickOfferRowIdentifier(this)">{{ offer.id }}</div>
               <div class="offercolumn offer-column-title">{{ offer.title }}</div>
               <div class="offercolumn offer-column-address">{{ offer.address }}</div>
               <div class=offercolumn>{{ offer.created_at|date }} {{ offer.created_at|time }}</div>
               <div class="offercolumn offer-column-status">{{ offer.status.value }}</div>
               <div class=offercolumn>
                  <button 
                    {% if current_operator.team_type.value == 'hunter' %}disabled{% endif %}
                    style="display:inline" onclick="onClickOfferRowDelete('{{ offer.id }}', '{{ client.client_id }}')"
                  >
                    Удалить
                  </button>
               </div>
               <div class=offercolumn>
                  <button 
                    {% if current_operator.team_type.value == 'hunter' %}disabled{% endif %}
                    style="display:inline" onclick="onClickOfferRowAlreadyPublished('{{ offer.id }}', '{{ client.client_id }}')"
                  >
                      Есть на Циан
                  </button>
               </div>
            </div>
         {% endfor %}
               </div>
      </div>

      <div class="error-messages-block">
         <div class="offers-error-message">Нет объявлений в работе, получите новые задания</div>
         <div class="client-error-message">Нет клиента в работе, получите новые задания</div>
      </div>

      <hr>

      <div class="caller-block">
        <!-- звонилка -->
        <div
          data-callComponent="call-buttons-v1" style="display: inline-block"
          data-town="{% if offers[0] and offers[0].town %}{{offers[0].town}}{% else %}Москва{% endif %}"
          town="{% if offers[0] and offers[0].town %}{{offers[0].town}}{% else %}Москва{% endif %}"
          taskKey="{{ client.avito_user_id }}" team="external-offers"
        ></div>
        <a target="_blank" href="/admin/calls-history/" class="btn btn-sm btn-default call-history" title="История звонков"><span class="glyphicon glyphicon-align-justify"></span></a>
      </div>
      <script>
        $(function()
        {
            initCallComponent({{operator_id}});
            document.getElementById('CallToPhone').value = '{{client_phone}}';
            formatPhone();
        });
         let DEBUG = 'True' === '{{ debug }}';
         let operator_is_hunter = '{{current_operator.team_type.value}}' == 'hunter';

         function formDataFromObject(obj) {
            var form_data = new URLSearchParams();
            for ( var key in obj ) {
               form_data.append(key, obj[key]);
            }

            return form_data
         }
         function redirectToTeamsPage(){
            if (DEBUG) {
               window.location.href = `/admin/teams/`;
            } else {
               // workaround to redirect when on service.cian.ru
               queryParams = new URLSearchParams(window.location.search)
               queryParams.set("url", `/admin/teams/`);
               history.pushState(null, null, "?"+queryParams.toString());
               location.reload()
            }
         }
         function onClickOfferRowIdentifier(element) {
            if (DEBUG) {
               window.location.href = `/admin/offer-card/${element.innerHTML}/`;
            } else {
               // workaround to redirect when on service.cian.ru
               queryParams = new URLSearchParams(window.location.search)
               queryParams.set("url", `/admin/offer-card/${element.innerHTML}/`);
               var url = window.location.href.split('?')[0] + "?" + queryParams.toString()
               window.open(url, '_blank').focus();
            }
         }
         async function onClickOfferRowDelete(offer_id, client_id) {
           if(operator_is_hunter){
             alert('У хантеров нет прав на удаление обьявления')
             return
           }
           let obj =  {
               'offerId': offer_id,
               'clientId': client_id
           }
           const response = await fetch("/api/admin/v1/delete-offer/", {
             method: 'POST',
             body: DEBUG ? JSON.stringify(obj) : formDataFromObject(obj)
           });
           resp = await response.json();
           if (resp.success === true) {
             location.reload();
           } else {
              alert('Не удалось удалить задание')
           }
         }
         async function onClickOfferRowAlreadyPublished(offer_id, client_id) {
           if(operator_is_hunter){
             alert('У хантеров нет прав на выдачу статуса "Есть на циан"')
             return
           }
           let obj =  {
               'offerId': offer_id,
               'clientId': client_id
           }
           const response = await fetch("/api/admin/v1/already-published-offer/", {
             method: 'POST',
             body: DEBUG ? JSON.stringify(obj) : formDataFromObject(obj)
           });
           resp = await response.json();
           if (resp.success === true) {
             location.reload();
           } else {
              alert('Не удалось отметить задание как уже опубликованное')
           }
         }

          let createTestClient = document.getElementById("createTestClient")
          if(createTestClient){
            createTestClient.onclick = async function () {
              let sourceUserId = document.getElementById('sourceUserIdInput').value;
              if(!sourceUserId){
                alert('Введите sourceUserId!')
                return
              }
              let obj = {
                useDefault: true,
                sourceUserId: sourceUserId,
              }
              const response = await fetch("/api/admin/v1/create-test-client/", {
                method: 'POST',
                body: DEBUG? JSON.stringify(obj) : formDataFromObject(obj)
              })
              resp = await response.json()
              if(resp.success == true){
                alert(`${resp.message} clientId: ${resp.clientId}`)
              } else if(resp.success == false){
                alert(resp.message)
              }else{
                alert(resp)
              }
            }
          }
          let createTestOffer = document.getElementById("createTestOffer")
          if(createTestOffer){
            createTestOffer.onclick = async function () {
              let sourceUserId = document.getElementById('sourceUserIdInput').value;
              let sourceObjectId = document.getElementById('sourceObjectIdInput').value;
              if(!sourceUserId){
                alert("Введите sourceUserId!")
                return
              }
              if(!sourceObjectId){
                alert("Введите sourceObjectId!")
                return
              }
              let obj = {
                useDefault: true,
                sourceUserId: sourceUserId,
                sourceObjectId: sourceObjectId,
              }
              const response = await fetch("/api/admin/v1/create-test-offer/", {
                method: 'POST',
                body: DEBUG? JSON.stringify(obj) : formDataFromObject(obj)
              })
              resp = await response.json();
              if(resp.success == true){
                alert(`${resp.message} offerId: ${resp.offerId}`)
              } else if(resp.success == false){
                alert(resp.message)
              }else{
                alert(resp)
              }
            }
          }

         document.getElementById("updateOffersBtn").onclick = async function () {
           let isTest = false;
           let test_select = document.getElementById('test_select');
           if(test_select){
            if(test_select.value === 'real'){
              isTest = false;
            }else if(test_select.value === 'test'){
              isTest = true;
            }
           }
           let obj = {
             isTest: isTest
           }
           let body = DEBUG ? JSON.stringify(obj) : formDataFromObject(obj);
           const response = await fetch("/api/admin/v1/update-offers-list/", {
             method: 'POST',
             body: body
           });
           resp = await response.json()
           if (resp.success === true) {
             location.reload();
           } else {
             errors = resp.errors.map((element) => element.message).join('<br>');
             updateOffersMessages = document.getElementById("updateOffersMessages1");
             updateOffersMessages.innerHTML = errors;
           }
         };

         document.getElementById("returnClientByPhoneNumberBtn").onclick = async function () {
           phoneNumber = document.getElementById("clientPhoneNumberInput").value
           if (phoneNumber === '') {
              alert('Не заполнен номер телефона!');
              return;
           }
           obj = {
              'phoneNumber': phoneNumber
           }
           body = DEBUG ? JSON.stringify(obj) : formDataFromObject(obj)
           const response = await fetch("/api/admin/v1/return-client-by-phone/", {
             method: 'POST',
             body: body
           });
           resp = await response.json()
           if (resp.success === true) {
              alert('Клиент взят в работу')
              location.reload()
           } else {
             errors = resp.errors.map((element) => element.message).join('<br>');
             updateOffersMessages = document.getElementById("updateOffersMessages1");
             updateOffersMessages.innerHTML = errors;
           }
         };

         {% if (client is defined) and client %}
         document.getElementById("declineClientButton1").onclick = async function () {
           let obj =  {
               'clientId': '{{ client.client_id }}'
           }
           const response = await fetch("/api/admin/v1/decline-client/", {
             method: 'POST',
             body: DEBUG ? JSON.stringify(obj) : formDataFromObject(obj)
           });
           resp = await response.json();
           if (resp.success === true) {
             location.reload();
           } else {
             errors = resp.errors.map((element) => element.message).join('<br>')
             document.getElementById("declineClientMessages1").innerHTML = errors;
           }
         };

         document.getElementById("callMissedClientButton1").onclick = async function () {
           let obj =  {
               'clientId': '{{ client.client_id }}'
           }
           const response = await fetch("/api/admin/v1/call-missed-client/", {
             method: 'POST',
             body: DEBUG ? JSON.stringify(obj) : formDataFromObject(obj)
           });
           resp = await response.json()
           if (resp.success === true) {
             location.reload();
           } else {
             errors = resp.errors.map((element) => element.message).join('<br>')
             document.getElementById("callMissedClientMessages1").innerHTML = errors
           }
         };

         document.getElementById("promoGivenClientButton").onclick = async function () {
           if(operator_is_hunter){
             alert('У хантеров нет прав на выдачу промокода')
             return
           }
           let obj =  {
               'clientId': '{{ client.client_id }}'
           }
           const response = await fetch("/api/admin/v1/promo-given-client/", {
             method: 'POST',
             body: DEBUG ? JSON.stringify(obj) : formDataFromObject(obj)
           });
           resp = await response.json()
           if (resp.success === true) {
             location.reload();
           } else {
             errors = resp.errors.map((element) => element.message).join('<br>')
             document.getElementById("promoGivenClientMessages").innerHTML = errors
           }
         };

         document.getElementById("phoneUnavailableClientButton").onclick = async function () {
           let obj =  {
               'clientId': '{{ client.client_id }}'
           }
           const response = await fetch("/api/admin/v1/phone-unavailable-client/", {
             method: 'POST',
             body: DEBUG ? JSON.stringify(obj) : formDataFromObject(obj)
           });
           resp = await response.json()
           if (resp.success === true) {
             location.reload();
           } else {
             errors = resp.errors.map((element) => element.message).join('<br>')
             document.getElementById("phoneUnavailableClientMessages").innerHTML = errors
           }
         };

         document.getElementById("commentClientButton").onclick = async function () {
           comment = document.getElementById('comment').value
           let obj =  {
               'clientId': '{{ client.client_id }}',
               'comment': comment,
           }
           const response = await fetch("/api/admin/v1/update-client-comment/", {
             method: 'POST',
             body: DEBUG ? JSON.stringify(obj) : formDataFromObject(obj)
           });
           resp = await response.json()
           document.getElementById("commentClientMessages").innerHTML = resp.message
         };

         $( document ).ready(function() {
             let reasonOfDecline = "{{ client.reason_of_decline.value if client else '' }}"
             $("#getReasonOfDecline option").each(function () {
                 if ($(this).val() == reasonOfDecline) {
                     $(this).prop("selected", true);
                 }
             });
         })

         document.getElementById("reasonOfDeclineClientButton").onclick = async function () {
             reason_of_decline = document.getElementById('getReasonOfDecline').value
             let obj =  {
                 'clientId': '{{ client.client_id }}',
                 'reasonOfDecline': reason_of_decline ? reason_of_decline: null,
             }
             const response = await fetch("/api/admin/v1/update-client-reason-of-decline/", {
                 method: 'POST',
                 body: DEBUG ? JSON.stringify(obj) : formDataFromObject(obj)
             });
             resp = await response.json()
             document.getElementById("reasonOfDeclineClientMessages").innerHTML = resp.message
         };

         document.getElementById("additionalNumbersClientButton").onclick = async function () {
             additional_numbers = document.getElementById('getAdditionalNumbers').value
             let obj =  {
                 'clientId': '{{ client.client_id }}',
                 'additionalNumbers': additional_numbers,
             }
             const response = await fetch("/api/admin/v1/update-client-additional-numbers/", {
                 method: 'POST',
                 body: DEBUG ? JSON.stringify(obj) : formDataFromObject(obj)
             });
             resp = await response.json()
             document.getElementById("additionalNumbersClientMessages").innerHTML = resp.message
         };

         document.getElementById("additionalEmailsClientButton").onclick = async function () {
             additional_emails = document.getElementById('getAdditionalEmails').value
             let obj =  {
                 'clientId': '{{ client.client_id }}',
                 'additionalEmails': additional_emails,
             }
             const response = await fetch("/api/admin/v1/update-client-additional-emails/", {
                 method: 'POST',
                 body: DEBUG ? JSON.stringify(obj) : formDataFromObject(obj)
             });
             resp = await response.json()
             document.getElementById("additionalEmailsClientMessages").innerHTML = resp.message
         };
         
         document.getElementById("realPhoneButton").onclick = async function () {
             real_phone = document.getElementById('realPhoneInput').value;
             if(!real_phone){
               real_phone = null;
             }
             real_phone_hunted_at = document.getElementById('realPhoneDtInput').value;
             if(!real_phone_hunted_at){
               real_phone_hunted_at = null;
             }
             real_name = document.getElementById('realNameInput').value;
             if(!real_name){
               real_name = null;
             }
             let obj =  {
                 'clientId': '{{ client.client_id }}',
                 'realPhone': real_phone,
                 'realName': real_name,
                 'realPhoneHuntedAt': real_phone_hunted_at,                 
             };
             const response = await fetch("/api/admin/v1/update-client-real-info/", {
                 method: 'POST',
                 body: DEBUG ? JSON.stringify(obj) : formDataFromObject(obj)
             });
             resp = await response.json()
             if(resp.success === true){
              alert(resp.message)
             }else if(resp.success === false){
              alert(resp.message)
             }else{
               alsert("Не удалось обновить добытый номер телефона")
             }
         };
         
         document.getElementById("callInterruptedClientButton").onclick = async function () {
           let obj =  {
               'clientId': '{{ client.client_id }}'
           }
           const response = await fetch("/api/admin/v1/call-interrupted-client/", {
             method: 'POST',
             body: DEBUG ? JSON.stringify(obj) : formDataFromObject(obj)
           });
           resp = await response.json()
           if (resp.success === true) {
             location.reload();
           } else {
             errors = resp.errors.map((element) => element.message).join('<br>')
             document.getElementById("callInterruptedClientMessages").innerHTML = errors
           }
         };

         document.getElementById("callLaterClientButton1").onclick = async function () {
           call_later_datetime = document.getElementById("call-later-datetime").value
           if (call_later_datetime === '') {
              alert('Не заполнена дата следующего звонка')
              return
           }
           call_later_datetime_iso = new Date(call_later_datetime).toISOString()

           let obj =  {
               'clientId': '{{ client.client_id }}',
               'callLaterDatetime': call_later_datetime_iso
           }
           const response = await fetch("/api/admin/v1/call-later-client/", {
             method: 'POST',
             body: DEBUG ? JSON.stringify(obj) : formDataFromObject(obj)
           });
           resp = await response.json()
           if (resp.success === true) {
             location.reload();
           } else {
             errors = resp.errors.map((element) => element.message).join('<br>')
             document.getElementById("callLaterClientMessages1").innerHTML = errors
           }
         };
{% endif %}
</script>
</body>
</html>
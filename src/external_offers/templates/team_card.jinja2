<html>
<head>
<meta charset="utf-8">
<title>Команда {{team.team_name}}({{team.team_id}})</title>
</head>
<body>
<div class="container">
    <hr>
    <div class="block">
        <button onclick="onClickRedirectToTeams(this)">
            Вернуться к списку обьектов
        </button>
        {% if current_operator.operator_id|string == team.lead_id|string %}
        <button style="color:red;" onclick="deleteTeam('{{team.team_id}}')">
            Удалить команду
        </button>
        <button onclick="prioritizeReal('{{team.team_id}}')">
            Пересчитать приоритеты
        </button>
        {% endif %}
        {% if operator_is_tester %}
        <button onclick="prioritizeTest('{{team.team_id}}')">
            Пересчитать приоритеты тестовых заданий
        </button>
        {% endif %}
        <button onclick="onClickGetWaitingOffers('{{team.team_id}}')">
            Узнать количество заданий в очереди
        </button>
        <hr>


        <form id="team_form">

        <input type="hidden" name="teamId" value="{{team.team_id}}" />
        ID команды: {{team.team_id}}
        <br><br>

        ID лида команды: 
        {% if team.lead_id %}
            <a style="color: blue; cursor: pointer;" title="перейти на страницу оператора" onclick="onClickRedirectToOperatorCard('{{team.lead_id}}')">
                {{team.lead_id}}
            </a>
        {% else %}
        -
        {% endif %}
        <select name="leadId" required>
            <option value="" {% if not team.lead_id %} selected {% endif %}>
                -
            </option>
            {% for teamlead in teamleads %}
                <option value="{{teamlead.operator_id}}" {% if team.lead_id == teamlead.operator_id %}selected{%endif%}>
                    {{teamlead.full_name}}({{teamlead.operator_id}})
                </option>
            {% endfor %}
        </select><br><br>

        Название: {{team.team_name}}
        <input value="{% if team.team_name %}{{team.team_name}}{% endif %}"  required
            type='text' name="teamName" placeholder='введите название команды'
        /><br><br>

        {% if team.team_waiting_offers_count or team.team_waiting_offers_count == 0 %}
        Количество заданий в очереди: {{team.team_waiting_offers_count}}(на {{team.team_waiting_offers_count_updated_at.strftime('%Y-%m-%d %H:%M:%S')}})
        <br><br>
        {% endif %}

        Роль операторов в команде:
        {% if team.team_type.value == 'hunter' %}
        Добытчики(hunter)
        {% elif team.team_type.value == 'attractor' %}
        Привлеченцы(attractor)
        {% endif %}
        <br>
        <br>
        <span title="Получать в очередь для прозвона только несханченых КТ клиентов?">Флаг коллтрекинга:</span>
        <input 
            type="checkbox"
            name="enableOnlyUnhuntedCt"
            {% if team_settings.get('enable_only_unhunted_ct') == True %}
            checked
            {% endif %}
        />
        <br>
        <br>
        <span title="Запускать приоретизацию для команды?">Флаг приоретизации:</span>
        <input 
            type="checkbox"
            name="enablePrioritization"
            {% if team.enable_prioritization %}
            checked
            {% endif %}
        />        
        <hr>
        <h2>Настройки обьявлений</h2>
        <button type="button" onclick="toggleBlock(this)">Показать\скрыть настройки обьявлений</button>
        <div class="toggledBlock" style="display: none; padding-left:15px;">
            <br>
            <span title="мультивыбор">Категории:</span>
            <select name="categories" multiple="multiple" size="20">
            {% for category in categories %}
                <option value="{{category}}" {% if category and category in team_settings.get('categories', []) %} selected {% endif %}>
                    {{category}}{% if category in commercial_categories %}(commercial){%endif%}
                </option>
            {% endfor %}
            </select>
            <br><br>
            <span title="мультивыбор">Регионы:</span>
            <select name="regions" multiple="multiple" size="20">
            {% for region_code, region_name in regions.items() %}
                <option value="{{region_code}}" {% if region_code and region_code in team_settings.get('regions', []) %} selected {% endif %}>
                    {{region_name}}({{region_code}})
                </option>
            {% endfor %}
            </select>
            <br><br>

            {# <span>минимальная дата создания в очереди:</span> #}
            {# <input name="..." type="number" {% if team_settings.get('calltracking') == True %} checked {% endif %}/> #}
            {# <br><br> #}

        </div>

        <hr>
        <h2>Настройки пользователей</h2>
        <button type="button" onclick="toggleBlock(this)">Показать\скрыть настройки клиентов</button>
        <div class="toggledBlock" style="display: none; padding-left:15px;">
            <br>
            <span title="мультивыбор">Сегмент:</span>
            <select name="segments" multiple="multiple" size="10">
            {% for segment in segments %}
                <option value="{{segment}}" {% if segment and segment in team_settings.get('segments', []) %} selected {%endif%}>
                    {{segment}}
                </option>
            {% endfor %}
            </select>
            <br><br>

            {# <span title="мультивыбор">Субсегмент:</span>
            <select name="subsegments" multiple="multiple" size="10">
            {% for subsegment in subsegments %}
                <option value="{{subsegment}}" {% if subsegment and subsegment in team_settings.get('subsegments', []) %} selected {% endif %}>
                    {{subsegment}}
                </option>
            {% endfor %}
            </select>
            <br><br> #}

            {# <span title="включая границы">Количество уникальных объектов, которых нет на Циан:</span><br>
            <input name="uniqueObjectsMin" placeholder="от" type="number" value="{{team_settings.unique_objects_min}}"/>
            <input required name="uniqueObjectsMax" placeholder="до" type="number" value="{{team_settings.unique_objects_max}}"/>
            <br><br>

            <span title="необязательный параметр">% коммерческих объектов от общего числа объектов:</span><br>
            <input name="commercialObjectsPercentageMin" placeholder="от" type="number" value="{{team_settings.commercial_objects_percentage_min}}"/>
            <input name="commercialObjectsPercentageMax" placeholder="до" type="number" value="{{team_settings.commercial_objects_percentage_max}}"/>
            <br><br>

            <span title="необязательный параметр">% загородных объектов от общего числа объектов:</span><br>
            <input name="suburbanObjectsPercentageMin" placeholder="от" type="number" value="{{team_settings.suburban_objects_percentage_min}}"/>
            <input name="suburbanObjectsPercentageMax" placeholder="до" type="number" value="{{team_settings.suburban_objects_percentage_max}}"/>
            <br><br>

            <span title="необязательный параметр">% объектов с авито:</span><br>
            <input name="avitoObjectsPercentageMin" type="number" value='{{team_settings.get("avito_objects_percentage_min")}}' placeholder="от"/>
            <input name="avitoObjectsPercentageMax" type="number" value='{{team_settings.get("avito_objects_percentage_max")}}' placeholder="до"/>
            <br><br>

            <span title="необязательный параметр">% объектов с домклика:</span><br>
            <input name="domclickObjectsPercentageMin" type="number" value='{{team_settings.get("domclick_objects_percentage_min")}}' placeholder="от"/>
            <input name="domclickObjectsPercentageMax" type="number" value='{{team_settings.get("domclick_objects_percentage_max")}}' placeholder="до"/>
            <br><br>

            <span title="необязательный параметр">% объектов с яндекса:</span><br>
            <input name="yandexObjectsPercentageMin" type="number" value='{{team_settings.get("yandex_objects_percentage_min")}}' placeholder="от"/>
            <input name="yandexObjectsPercentageMax" type="number" value='{{team_settings.get("yandex_objects_percentage_max")}}' placeholder="до"/>
            <br><br>

            <span title="фиксируем период, за который пользователи исключаются.  например : были в обзвоне посл 7, 14, 30 дней, 60 дней, 90 дней, 180 дней, 360 дней, за весь период обзвона">уже был в обзвоне:</span><br>
            <input name="validDaysAfterCall" type="number" value='{{team_settings.get("valid_days_after_call")}}' placeholder="введите количество дней"/> #}

        </div>
        
        
        <hr>
        <h2>Настройки cортировок</h2>
        <button type="button" onclick="toggleBlock(this)">Показать\скрыть настройки сортировок</button>
        <div class="toggledBlock" style="display: none; padding-left:15px;">
            <br>

            <div style="display: flex;">
                <div style="margin: 10px 20px; width: 250px; display: flex; flex-direction: column;">
                    <input name="activationStatusPosition" value="{{team_settings.get('activation_status_position', '')}}" placeholder="" required/><br>
                    <span>Порядок признака 'Статус клиента'</span><br>
                </div>
                <div style="margin: 10px 20px; width: 250px; display: flex; flex-direction: column;">
                    <input name="unactivatedClientPriority" value="{{team_settings.get('unactivated_client_priority', '')}}" placeholder="" required/><br>
                    <span>Приоритет добивочного клиента</span><br>
                    <input name="newClientPriority" value="{{team_settings.get('new_client_priority', '')}}" placeholder="" required/><br>
                    <span>Приоритет нового клиента</span><br>
                </div>
            </div>
            <hr>
            <div style="display: flex;">
                <div style="margin: 10px 20px; width: 250px; display: flex; flex-direction: column;">
                    <input name="callStatusPosition" value="{{team_settings.get('call_status_position', '')}}" placeholder="" required/><br>
                    <span>Порядок признака 'Cтатус звонка'</span><br>
                </div>
                <div style="margin: 10px 20px; width: 250px; display: flex; flex-direction: column;">
                    <input name="callLaterPriority" value="{{team_settings.get('call_later_priority', '')}}" placeholder="" required/><br>
                    <span>Приоритет перезвонов</span><br>
                    <input name="callMissedPriority" value="{{team_settings.get('call_missed_priority', '')}}" placeholder="" required/><br>
                    <span>Приоритет недозвонов</span><br>
                    <input name="waitingPriority" value="{{team_settings.get('waiting_priority', '')}}" placeholder="" required/><br>
                    <span>Приоритет ожидающих</span><br>
                </div>
            </div>
            <hr>
            <div style="padding-left: 20px;">
                <input name="regionPosition" value="{{team_settings.get('region_position', '')}}" placeholder="" required/><br>
                <span>Порядок признака 'Регион'</span><br>
                <button type="button" onclick="toggleBlock(this)">Показать\скрыть приоритеты регионов</button>
                <div id="mainRegionsPriority" style="padding-left: 130px">
                {% for region_code, region_name in regions.items() %}
                <br>
                <span>
                    {{region_name}}({{region_code}})
                </span>
                <br>
                <input
                    data-region_code="{{region_code}}"
                    value="{{ team_settings.get('main_regions_priority', {}).get(region_code, '99')}}"
                    style="width: 400;" type="number"
                    placeholder="Введите приоритет региона '{{region_name}}({{region_code}})'"
                />
                {% endfor %}
                </div>
            </div>
            <hr>
            <div style="display: flex;">
                <div style="margin: 10px 20px; width: 250px; display: flex; flex-direction: column;">
                    <input name="segmentPosition" value="{{team_settings.get('segment_position', '')}}" placeholder="" required/><br>
                    <span>Порядок признака 'Сегмент'</span><br>
                </div>
                <div style="margin: 10px 20px; width: 250px; display: flex; flex-direction: column;">
                    <input name="smbPriority" value="{{team_settings.get('smb_priority', '')}}" placeholder="" required/><br>
                    <span>Приоритет для сегмента SMB</span><br>
                    <input name="homeownerPriority" value="{{team_settings.get('homeowner_priority', '')}}" placeholder="" required/><br>
                    <span>Приоритет для сегмента собственников</span><br>
                </div>
            </div>
            <hr>
            <div style="display: flex;">
                <div style="margin: 10px 20px; width: 250px; display: flex; flex-direction: column;">
                    <input name="lkPosition" value="{{team_settings.get('lk_position', '')}}" placeholder="" required/><br>
                    <span>Порядок признака 'Статус Учетной Записи(наличие учетной записи и количество обьявлений'</span><br>
                </div>
                <div style="margin: 10px 20px; width: 250px; display: flex; flex-direction: column;">
                    <input name="noLkSmbPriority" value="{{team_settings.get('no_lk_smb_priority', '')}}" placeholder="" required/><br>
                    <span>Приоритет для smb: нет ЛК на циан</span><br>
                    <input name="noActiveSmbPriority" value="{{team_settings.get('no_active_smb_priority', '')}}" placeholder="" required/><br>
                    <span>Приоритет 'Нет ЛК на циан'</span><br>
                    <input name="keepProportionSmbPriority" value="{{team_settings.get('keep_proportion_smb_priority', '')}}" placeholder="" required/><br>
                    <span>Приоритет 'нет активных объявлений'</span><br>
                    <input name="noLkHomeownerPriority" value="{{team_settings.get('no_lk_homeowner_priority', '')}}" placeholder="" required/><br>
                    <span>Приоритет 'соблюдена пропорция заданий в админке и уже активных объявлений у клиента'</span><br>
                    <input name="activeLkNoHomeownerPriority" value="{{team_settings.get('active_lk_homeowner_priority', '')}}" placeholder="" required/><br>
                    <span>Приоритет для smb: есть активный ЛК на циан</span><br>
                </div>
            </div>
            <hr>
            <div style="display: flex;">
                <div style="margin: 10px 20px; width: 250px; display: flex; flex-direction: column;">
                    <input name="dealTypePosition" value="{{team_settings.get('deal_type_position', '')}}" placeholder="" required/><br>
                    <span>Порядок признака 'Тип сделки'</span><br>
                </div>
                <div style="margin: 10px 20px; width: 250px; display: flex; flex-direction: column;">
                    <input name="salePriority" value="{{team_settings.get('sale_priority', '')}}" placeholder="" required/><br>
                    <span>Приоритет продажи</span><br>
                    <input name="rentPriority" value="{{team_settings.get('rent_priority', '')}}" placeholder="" required/><br>
                    <span>Приоритет аренды</span><br>         
                </div>
            </div>
            <hr>
            <div style="display: flex;">
                <div style="margin: 10px 20px; width: 250px; display: flex; flex-direction: column;">
                    <input name="offerTypePosition" value="{{team_settings.get('offer_type_position', '')}}" placeholder="" required/><br>
                    <span>Порядок признака 'Тип Недвижимости'</span><br>
                </div>
                <div style="margin: 10px 20px; width: 250px; display: flex; flex-direction: column;">
                    <input name="flatPriority" value="{{team_settings.get('flat_priority', '')}}" placeholder="" required/><br>
                    <span>Приоритет городской недвижимости</span><br>
                    <input name="suburbanPriority" value="{{team_settings.get('suburban_priority', '')}}" placeholder="" required/><br>
                    <span>Приоритет загородной недвижимости</span><br>
                    <input name="commercialPriority" value="{{team_settings.get('commercial_priority', '')}}" placeholder="" required/><br>
                    <span>Приоритет комерческой недвижимости</span><br>
                </div>
            </div>
            
            
        </div><br><br>
        {# <hr>
        <h2>Настройки промокодов</h2>
        <button type="button" onclick="toggleBlock(this)">Показать\скрыть настройки промокодов</button>
        <div class="toggledBlock" style="display: none; padding-left:15px;">
            <br>
            <span>регионы применения:</span><br>
            <select name="promocodeRegions" multiple="multiple" size="10">
                {% for region_code, region_name in regions.items() %}
                <option value="{{region_code}}" {% if region_code and region_code in team_settings.get('promocode_regions', []) %}selected{% endif %}>
                    {{region_name}}({{region_code}})
                </option>
                {% endfor %}
            </select><br><br>
            
            <span>наполнение:<span><br>
            <select name="filling" multiple="multiple" size="10">
                <option value="paid" {% if "paid" in team_settings.get('filling', []) %} selected {% endif %}>
                    платные
                </option>
                <option value="premium" {% if "premium" in team_settings.get('filling', []) %} selected {% endif %}>
                    премиум
                </option>
                <option value="top" {% if "top" in team_settings.get('filling', []) %} selected {% endif %}>
                    топ
                </option>
                <option value="auction_points" {% if "auction_points" in team_settings.get('filling', []) %} selected {% endif %}>
                    баллы на аукцион
                </option>
            </select><br><br>
            
            <span>стоимость:</span><br>
            <input name="promocodePrice" type="number" value="{{team_settings['promocode_price']}}" placeholder="Введите стоимость" required/>
            <br><br>
            
            <span>срок действия:</span><br>
            <input name="promocodePeriod" type="number" value="{{team_settings['promocode_period']}}" placeholder="Введите срок действия(в днях)" required/>
            <br><br>
            
            <span>название группы:</span><br>
            <input name="promocodeGroupName" type="text" value="{{team_settings.get('promocode_group_name', '')}}" placeholder="Введите название групы промокодов" required/>
        </div> #}

        <hr>
        {% if current_operator.operator_id|string == team.lead_id|string %}
        <button onclick="toggleBlocks()" type='submit'>Обновить информацию про команду</button>
        {% endif %}

        </form>
    </div>
</div>
<script>
    let DEBUG = 'True' === '{{debug}}';
    // fix for service.cian.ru
    window.onpopstate = function(event) {
        location.reload();
    };
    function formDataFromObject(obj) {
        var form_data = new URLSearchParams();
        for ( var key in obj ) {
            var value = obj[key];
            if(value == 'null'){
                value = null
            }else if(value == null){
                value = null
            }else if(value.constructor.name == 'Array'){
                value = JSON.stringify(value)
            }else if(value.constructor.name == 'Object'){
                value = JSON.stringify(value)
            }
            form_data.append(key, value);
        }
        return form_data
    }
    function getBody(obj){
        return DEBUG ? JSON.stringify(obj) : formDataFromObject(obj)
    }
    function toggleBlock(element) {
        var x = element.nextElementSibling;
        if (x.style.display === "none") {
            x.style.display = "block";
        } else {
            x.style.display = "none";
        }
    } 
    function redirect(url){
        if (DEBUG) {
            window.location.href = url;
        } else {
            // workaround to redirect when on service.cian.ru
            queryParams = new URLSearchParams(window.location.search)
            queryParams.set("url", url);
            history.pushState(null, null, "?"+queryParams.toString());
            location.reload()
        }
    }
    function onClickRedirectToTeams(element) {
        redirect('/admin/teams/')
    }
    function onClickRedirectToOperatorCard(operator_id) {
        redirect(`/admin/operator-card/${operator_id}/`)
    }
    async function onClickGetWaitingOffers(team_id){

        let obj = {
            'teamId': team_id
        }
        // Получить изначальное время последнего обновления количества заданий в очереди дял команды
        const team_response = await fetch("/api/admin/v1/get-team-public/", {
            method: 'POST',
            body: getBody(obj)
        });
        resp = await team_response.json();
        var team = resp.team;
        var old_team_offers_count_updated_at = team.teamWaitingOffersCountUpdatedAt;

        // Запустить процесс обновления
        const count_response = await fetch("/api/admin/v1/get-waiting-offers-count-for-team-public/", {
            method: 'POST',
            body: getBody(obj)
        });
        resp = await count_response.json();
        if (resp.success === true) {
            alert(resp.message)
        } else if (resp.success === false){
            alert(resp.message)
            return
        }else {
            alert('Не удалось получить количество заданий в очереди для команды ' + team_id)
            return
        }

        // Проверять каждые 5 секунд не обновилось ли количество заданий
        const intervalId = setInterval(() => {
            let response = fetch("/api/admin/v1/get-team-public/", {
                method: 'POST',
                body: getBody(obj)
            }).then((response) => {
                return response.json()
            }).then((data) => {
                var team = data.team;
                if(team){
                    var new_team_offers_count_updated_at = team.teamWaitingOffersCountUpdatedAt
                    if(new_team_offers_count_updated_at == old_team_offers_count_updated_at){
                        console.log('Счетчик команды еще не обновился')
                    }else{
                        alert(`Количество заданий для команды #${team_id} - ${team.teamWaitingOffersCount}`)
                        clearInterval(intervalId)
                    }
                }
            });
        }, 5000);

    };




    function validate_values(form_values){
        console.log('form_values', form_values)
        var positions = [
            form_values['activationStatusPosition'],
            form_values['callStatusPosition'],
            form_values['regionPosition'],
            form_values['segmentPosition'],
            form_values['lkPosition'],
            form_values['dealTypePosition'],
            form_values['offerTypePosition'],
        ]
        var positionsSet = new Set(positions)
        var positionsMax = Math.max.apply(this, [...positionsSet])
        var positionsMin = Math.min.apply(this, [...positionsSet])

        var activationStatusPriorities = [
            form_values['unactivatedClientPriority'],
            form_values['newClientPriority'],
        ]
        var activationStatusPrioritiesSet = new Set(activationStatusPriorities)
        var activationStatusPrioritiesMax = Math.max.apply(this, [...activationStatusPrioritiesSet])
        var activationStatusPrioritiesMin = Math.max.apply(this, [...activationStatusPrioritiesSet])

        var callStatusPriorities = [
            form_values['callLaterPriority'],
            form_values['callMissedPriority'],
            form_values['waitingPriority'],
        ]
        var callStatusPrioritiesSet = new Set(callStatusPriorities)
        var callStatusPrioritiesMax = Math.max.apply(this, [...callStatusPrioritiesSet])
        var callStatusPrioritiesMin = Math.max.apply(this, [...callStatusPrioritiesSet])

        var segmentPriorities = [
            form_values['smbPriority'],
            form_values['homeownerPriority'],
        ]
        var segmentPrioritiesSet = new Set(segmentPriorities)
        var segmentPrioritiesMax = Math.max.apply(this, [...segmentPrioritiesSet])
        var segmentPrioritiesMin = Math.max.apply(this, [...segmentPrioritiesSet])
 
        var dealTypePriorities = [
            form_values['salePriority'],
            form_values['rentPriority'],
        ]
        var dealTypePrioritiesSet = new Set(dealTypePriorities)
        var dealTypePrioritiesMax = Math.max.apply(this, [...dealTypePrioritiesSet])
        var dealTypePrioritiesMin = Math.max.apply(this, [...dealTypePrioritiesSet])

        var offerTypePriorities = [
            form_values['flatPriority'],
            form_values['suburbanPriority'],
            form_values['commercialPriority'],
        ]
        var offerTypePrioritiesSet = new Set(offerTypePriorities)
        var offerTypePrioritiesMax = Math.max.apply(this, [...offerTypePrioritiesSet])
        var offerTypePrioritiesMin = Math.max.apply(this, [...offerTypePrioritiesSet])
 
        // positions
        if(positionsSet.size < positions.length){
            return `В разделе "Настройки cортировок" есть повторяющиеся значения среди порядков признаков. Все значения должны быть уникальными.`
        }
        else if(positionsMax > positions.length){
            return `В разделе "Настройки cортировок" среди порядков признаков есть значения больше 7. Все значения должны быть меньше 8 и больше 0.`
        }
        else if(positionsMin < 1){
            return `В разделе "Настройки cортировок" среди порядков признаков есть значения меньше 1. Все значения должны быть меньше 8 и больше 0.`
        }
        // activationStatusPriorities
        else if(activationStatusPrioritiesSet.size < activationStatusPriorities.length){
            console.log('activationStatusPrioritiesSet.size', activationStatusPrioritiesSet.size)
            console.log('activationStatusPriorities.length', activationStatusPriorities.length)
            return `В значениях признака "Статус клиента" есть повторяющиеся значения приоритетов. Все значения должны быть уникальными.`
        }
        else if(activationStatusPrioritiesMax > activationStatusPriorities.length){
            return `В значениях признака "Статус клиента" есть значения больше ${activationStatusPriorities.length}. Все значения должны быть меньше ${activationStatusPriorities.length} и больше 0.`
        }
        else if(activationStatusPrioritiesMin < 1){
            return `В значениях признака "Статус клиента" есть значения меньше 1. Все значения должны быть меньше ${activationStatusPriorities.length} и больше 0.`
        }
        // callStatusPriorities
        else if(callStatusPrioritiesSet.size < callStatusPriorities.length){
            return `В значениях признака "Cтатус звонка" есть повторяющиеся значения приоритетов. Все значения должны быть уникальными.`
        }
        else if(callStatusPrioritiesMax > callStatusPriorities.length){
            return `В значениях признака "Статус звонка" есть значения больше ${callStatusPriorities.length}. Все значения должны быть меньше ${callStatusPriorities.length} и больше 0.`
        }
        else if(callStatusPrioritiesMin < 1){
            return `В значениях признака "Статус звонка" есть значения меньше 1. Все значения должны быть меньше ${callStatusPriorities.length} и больше 0.`
        }
        // segmentPriorities
        else if(segmentPrioritiesSet.size < segmentPriorities.length){
            return `В значениях признака "Сегмент" есть повторяющиеся значения приоритетов. Все значения должны быть уникальными.`
        }
        else if(segmentPrioritiesMax > segmentPriorities.length){
            return `В значениях признака "Сегмент" есть значения больше ${segmentPriorities.length}. Все значения должны быть меньше ${segmentPriorities.length} и больше 0.`
        }
        else if(segmentPrioritiesMin < 1){
            return `В значениях признака "Сегмент" есть значения меньше 1. Все значения должны быть меньше ${segmentPriorities.length} и больше 0.`
        }
        // dealTypePriorities
        else if(dealTypePrioritiesSet.size < dealTypePriorities.length){
            return `В значениях признака "Тип сделки" есть повторяющиеся значения приоритетов. Все значения должны быть уникальными.`
        }
        else if(dealTypePrioritiesMax > dealTypePriorities.length){
            return `В значениях признака "Тип сделки" есть значения больше ${dealTypePriorities.length}. Все значения должны быть меньше ${dealTypePriorities.length} и больше 0.`
        }
        else if(dealTypePrioritiesMin < 1){
            return `В значениях признака "Тип сделки" есть значения меньше 1. Все значения должны быть меньше ${dealTypePriorities.length} и больше 0.`
        }
        // offerTypePriorities
        else if(offerTypePrioritiesSet.size < offerTypePriorities.length){
            return `В значениях признака "Тип Недвижимости" есть повторяющиеся значения приоритетов. Все значения должны быть уникальными.`
        }
        else if(offerTypePrioritiesMax > offerTypePriorities.length){
            return `В значениях признака "Тип Недвижимости" есть значения больше ${offerTypePriorities.length}. Все значения должны быть меньше ${offerTypePriorities.length} и больше 0.`
        }
        else if(offerTypePrioritiesMin < 1){
            return `В значениях признака "Тип Недвижимости" есть значения меньше 1. Все значения должны быть меньше ${offerTypePriorities.length} и больше 0.`
        }
        else{
            return null
        }
    }
    function collectFormValues(form){
        let values = {}
        for(var i=0; i < form.elements.length; i++){
            var item = form.elements.item(i);
            if(item.multiple){
                values[item.name] = []
                for(var j=0; j < item.options.length; j++){
                    var option = item.options[j];
                    if(option.selected){
                        values[item.name].push(item.options[j].value)
                    }
                }
                values[item.name] = JSON.stringify(values[item.name])
            }else if(item.type == "checkbox"){
                values[item.name] = item.checked;
            }else if(item.class == "regionPriority"){
                continue;
            }else if(item.name == ""){
                continue;
            }else if(item.value == ""){
                values[item.name] = null
            }else{
                if(!item.value){
                    values[item.name] = null;
                }else{
                    values[item.name] = item.value;
                }
            }
        }
        var mainRegionsPriority = document.getElementById("mainRegionsPriority")
        var mainRegionsPriorityObj = {}
        for(var k=0; k < mainRegionsPriority.children.length; k++){
            var child = mainRegionsPriority.children[k];
            if(!child.value){
                continue;
            }
            var key = child.dataset.region_code
            mainRegionsPriorityObj[key] = parseInt(child.value)
        }
        values["mainRegionsPriority"] = JSON.stringify(mainRegionsPriorityObj)
        return values
    }
    async function updateTeam(event){
        event.preventDefault()
        let team_form = document.getElementById('team_form')
        let form_values = collectFormValues(team_form)
        let message = validate_values(form_values)
        if(message){
            alert(message)
            return
        }
        let body = getBody(form_values)
        const response = await fetch("/api/admin/v1/update-team-public/", {
            method: 'POST',
            body: body,
        });
        resp = await response.json();
        if (resp.success === true) {
            alert(resp.message);
            //location.reload();
        }else if (resp.success === false){
            alert(resp.message);
        } else {
            alert('Не удалось обновить информацию о команде.');
        }
    }
    async function toggleBlocks(){
        let form = document.getElementById('team_form')
        if(!form.checkValidity()){
            document.querySelectorAll('.toggledBlock').forEach((e)=>{
                e.style.display = 'block';
            })
        }
        form.addEventListener('submit', updateTeam)
    }
    async function prioritizeReal(teamId){
        let obj = {
            "teamId": teamId,
            "isTest": false,
        }
        const response = await fetch("/api/admin/v1/prioritize-waiting-offers-public/", {
            method: 'POST',
            body: getBody(obj)
        });
        resp = await response.json();
        if (resp.success === true) {
            alert(resp.message)
        } else if (resp.success === false){
            alert(resp.message)
        }else {
            alert('Не удалось приоретизировать задания для команды.')
        }
    }
    async function prioritizeTest(teamId){
        let obj = {
            "teamId": teamId,
            "isTest": true,
        }
        const response = await fetch("/api/admin/v1/prioritize-waiting-offers-public/", {
            method: 'POST',
            body: getBody(obj)
        });
        resp = await response.json();
        if (resp.success === true) {
            alert(resp.message)
        } else if (resp.success === false){
            alert(resp.message)
        }else {
            alert('Не удалось приоретизировать задания для команды.')
        }
    }
    async function deleteTeam(id){
        let obj = {
            "teamId": id,
        }
        const response = await fetch("/api/admin/v1/delete-team-public/", {
            method: 'POST',
            body: getBody(obj)
        });
        resp = await response.json();
        if (resp.success === true) {
            alert(resp.message)
            redirect('/admin/teams/')
        } else if (resp.success === false){
            alert(resp.message)
        }else {
            alert('Не удалось удалить команду.')
        }
    }
</script>
</body>
</html>

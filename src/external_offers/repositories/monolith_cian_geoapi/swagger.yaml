definitions:
  Geo.Api.App.Geo.Models.GeoCoderWebApi.Details:
    description: Содержит в себе массив объектов, каждый из которых описывает часть
      адреса (то что разделено запятыми).
    properties:
      fullName: {description: "Полное название адресного элемента. \r\nТ.е. вместе\
          \ с указанием типа объекта, например, площадь Ленина, деревня Ново).", type: string}
      geoType:
        description: Тип адресного элемента (страна, локация, улица, дом).
        enum: [Country, Location, Street, Road, District, Underground, House, EntryIntoRoad,
          NewObject]
        type: string
        x-Country: Страна
        x-District: Район
        x-EntryIntoRoad: Въезд на шоссе
        x-House: Дом
        x-Location: Локация
        x-NewObject: ЖК - новостройки
        x-Road: Шоссе
        x-Street: Улица
        x-Underground: Метро
      hasMetro: {description: Есть метро., type: boolean}
      hasRoad: {description: Есть шоссе., type: boolean}
      id: {description: Идентификатор в нашей базе., format: int32, type: integer}
      isLocality: {description: Если населенный пункт., type: boolean}
      name: {description: Короткое название адресного элемента., type: string}
      streetRequired: {description: Если улица обязательна., type: boolean}
    type: object
  Geo.Api.App.Geo.Models.GeoCoderWebApi.GeoCodedRequest:
    properties:
      address: {description: Адрес, type: string}
      kind: {description: Вид топонима (обязательный параметр)., type: string}
      lat: {description: Широта., format: double, type: number}
      lng: {description: Долгота., format: double, type: number}
    type: object
  Geo.Api.App.Geo.Models.GeoCoderWebApi.GeoCodedResponse:
    properties:
      billingRegionId: {description: Идентификатор региона тарифной сетки., format: int32,
        type: integer}
      countryId: {description: ID страны, format: int32, type: integer}
      details:
        description: Содержит в себе массив объектов, каждый из которых описывает
          часть адреса (то что разделено запятыми).
        items: {$ref: '#/definitions/Geo.Api.App.Geo.Models.GeoCoderWebApi.Details'}
        type: array
      geo: {$ref: '#/definitions/Geo.GeoApi.Models.Geo', description: 'Информация
          по Гео (широта, долгота).'}
      isParsed: {description: Если удалось распарсить адрес., type: boolean}
      locationPath:
        description: "Идентификаторы всех локаций, от родительского до самого точного\r\
          \nИспользуется в биллинге"
        items: {format: int32, type: integer}
        type: array
      postalCode: {description: Почтовый индекс, type: string}
      text: {description: Результат яндекса после геокодинга., type: string}
    type: object
  Geo.GeoApi.Models.Geo:
    description: Координата
    properties:
      lat: {description: Широта., format: double, type: number}
      lng: {description: Долгота., format: double, type: number}
    type: object
host: master.monolith-cian-geoapi.dev3.cian.ru
info: {title: monolith-cian-geoapi, version: v1}
paths:
  /v2/geocode/:
    post:
      consumes: [application/json, text/json, application/x-www-form-urlencoded]
      operationId: GeoCoderWebApi_GeoCodedAsync
      parameters:
      - in: body
        name: request
        required: true
        schema: {$ref: '#/definitions/Geo.Api.App.Geo.Models.GeoCoderWebApi.GeoCodedRequest'}
      produces: [application/json, text/json]
      responses:
        '200':
          description: OK
          schema: {$ref: '#/definitions/Geo.Api.App.Geo.Models.GeoCoderWebApi.GeoCodedResponse'}
      tags: [GeoCoderWebApi]
schemes: [http]
swagger: '2.0'
x-cian-mq:
  exchanges: {}
  spec-version: '1.0'
